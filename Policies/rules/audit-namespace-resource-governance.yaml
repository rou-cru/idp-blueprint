apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: audit-namespace-resource-governance
  annotations:
    policies.kyverno.io/title: Audit Namespace Resource Governance
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Namespace, LimitRange, ResourceQuota
    policies.kyverno.io/description: >-
      This policy audits that every application namespace has a LimitRange and a
      ResourceQuota defined. These resources are crucial for enforcing resource
      governance and preventing resource starvation within the cluster.
spec:
  validationFailureAction: audit
  background: true
  rules:
    - name: check-for-limitrange
      match:
        any:
          - resources:
              kinds:
                - Namespace
      exclude:
        any:
          - resources:
              namespaces:
                - kube-system
                - kube-public
                - kube-node-lease
                - kyverno
                - argocd
                - cert-manager
                - external-secrets-system
                - vault-system
      context:
        - name: limitranges_in_ns
          apiCall:
            urlPath: "/api/v1/namespaces/{{request.object.metadata.name}}/limitranges"
            jmesPath: "items[].metadata.name"
      validate:
        message: "Namespace {{request.object.metadata.name}} must have a LimitRange defined for resource governance."
        deny:
          conditions:
            all:
              - key: "{{ limitranges_in_ns | length }}"
                operator: Equals
                value: 0
    - name: check-for-resourcequota
      match:
        any:
          - resources:
              kinds:
                - Namespace
      exclude:
        any:
          - resources:
              namespaces:
                - kube-system
                - kube-public
                - kube-node-lease
                - kyverno
                - argocd
                - cert-manager
                - external-secrets-system
                - vault-system
      context:
        - name: resourcequotas_in_ns
          apiCall:
            urlPath: "/api/v1/namespaces/{{request.object.metadata.name}}/resourcequotas"
            jmesPath: "items[].metadata.name"
      validate:
        message: "Namespace {{request.object.metadata.name}} must have a ResourceQuota defined for resource governance."
        deny:
          conditions:
            all:
              - key: "{{ resourcequotas_in_ns | length }}"
                operator: Equals
                value: 0

version: '3'

vars:
  DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME | default "roucru/idp-blueprint"}}'
  DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG | default "latest"}}'
  DOCKER_IMAGE_TAG_MINIMAL: '{{.DOCKER_IMAGE_TAG_MINIMAL | default "minimal"}}'

  # Helm Chart Versions
  CILIUM_VERSION: '{{.CILIUM_VERSION | default "1.18.2"}}'
  CERT_MANAGER_VERSION: '{{.CERT_MANAGER_VERSION | default "v1.19.0"}}'
  PROMETHEUS_CRDS_VERSION: '{{.PROMETHEUS_CRDS_VERSION | default "77.14.0"}}'
  EXTERNAL_SECRETS_VERSION: '{{.EXTERNAL_SECRETS_VERSION | default "0.20.2"}}'
  VAULT_VERSION: '{{.VAULT_VERSION | default "0.31.0"}}'
  ARGOCD_VERSION: '{{.ARGOCD_VERSION | default "8.6.0"}}'

  # Operational Settings
  KUBECTL_TIMEOUT: '{{.KUBECTL_TIMEOUT | default "300s"}}'
  K3D_CONFIG: '{{.K3D_CONFIG | default "IT/k3d-cluster-cached.yaml"}}'
  REGISTRY_CACHE_PATH: '{{.REGISTRY_CACHE_PATH | default "/tmp/k3d-registry"}}'

tasks:
  deploy:
    desc: 'Deploy the entire IDP platform'
    cmds:
      - defer: echo '{{if .EXIT_CODE}}⚠️  Deployment failed! Run "task destroy" to clean up and retry.{{else}}Success 😌{{end}}'
      # 1. Bootstrap Cluster
      - task: k3d:create # Create Nodes
      - task: it:apply-namespaces # Prepare all no-gitops namespaces
      - task: it:apply-serviceaccounts # Prepare all no-gitops SA
      # Complete bootstrapping by adding the CNI
      - task: cilium:deploy
      - task: it:apply-prometheus-crds
      - task: cilium:enable-servicemonitor
      - task: external-secrets:deploy
      # 2. Secrets & Certs Management
      - task: cert-manager:deploy
      - task: vault:deploy
      # 3. Deploy GitOps Engine
      - task: argocd:deploy
      # 4. Deploy Policy as Code Engine
      - task: policies:deploy
      # 5. Deploy Application Stacks for everything else
      - task: stacks:deploy # Everything else that's part of the IDP
      - exit 0

  deploy:nocache:
    desc: 'Deploy without registry cache (test slow pulls)'
    cmds:
      - task: deploy
        vars:
          K3D_CONFIG: IT/k3d-cluster.yaml

  destroy:
    desc: 'Remove all IDP related components and cluster'
    cmds:
      - k3d cluster delete idp-demo

  # Deploys
  # ------------------------------------------------------------------------------
  stacks:deploy:
    desc: 'Deploy all application stacks via ArgoCD ApplicationSets'
    deps:
      - observability:deploy
      - cicd:deploy
      - security:deploy

  policies:deploy:
    desc: 'Deploy the Kyverno Policy Engine and policies via ArgoCD'
    cmds:
      - kubectl apply -f Policies/app-kyverno.yaml

  observability:deploy:
    desc: 'Deploy the Observability Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/observability/applicationset-observability.yaml

  cicd:deploy:
    desc: 'Deploy the CICD Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/cicd/applicationset-cicd.yaml

  security:deploy:
    desc: 'Deploy the Security Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/security/applicationset-security.yaml

  # K8s Setup
  # ------------------------------------------------------------------------------
  k3d:create:
    desc: 'Create a k3d cluster with 3 nodes'
    status:
      - k3d cluster list | grep -q "idp-demo"
    cmds:
      - k3d cluster create idp-demo -c {{.K3D_CONFIG}}

  it:apply-namespaces:
    desc: 'Apply all IT bootstrap namespaces via Kustomize'
    cmds:
      - kustomize build IT/namespaces/ | kubectl apply -f -

  it:apply-serviceaccounts:
    desc: 'Apply all IT bootstrap ServiceAccounts via Kustomize'
    cmds:
      - kustomize build IT/serviceaccounts/ | kubectl apply -f -

  it:apply-prometheus-crds:
    desc: 'Apply Prometheus CRDs from the dedicated Helm chart'
    cmds:
      - |
        helm upgrade --install prometheus-crds prometheus-community/prometheus-operator-crds \
          --version 23.0.0 \
          --namespace kube-system \
          --hide-notes

  # Cilium
  # ------------------------------------------------------------------------------
  cilium:deploy:
    desc: 'Install Cilium as CNI'
    cmds:
      - |
        helm upgrade --install cilium cilium/cilium \
          --version {{.CILIUM_VERSION}} \
          --namespace kube-system \
          --values IT/cilium/cilium-values.yaml \
          --hide-notes
      - kubectl wait --for=condition=Ready pods -l k8s-app=cilium -n kube-system --timeout=120s

  cilium:enable-servicemonitor:
    desc: 'Enable Cilium ServiceMonitor (requires Prometheus CRDs)'
    cmds:
      - |
        helm upgrade cilium cilium/cilium \
          --version {{.CILIUM_VERSION}} \
          --namespace kube-system \
          --reuse-values \
          --set prometheus.serviceMonitor.enabled=true \
          --set operator.prometheus.serviceMonitor.enabled=true \
          --hide-notes

  # Cert Manager
  # ------------------------------------------------------------------------------
  cert-manager:deploy:
    desc: 'Deploy Cert-Manager to handle CA'
    cmds:
      - |
        helm upgrade --install cert-manager jetstack/cert-manager \
          --version {{.CERT_MANAGER_VERSION}} \
          --namespace cert-manager \
          --values IT/cert-manager/cert-manager-values.yaml \
          --hide-notes
      - kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout={{.KUBECTL_TIMEOUT}}
      - task: it:cert-manager:apply-resources

  it:cert-manager:apply-resources:
    desc: 'Apply all Cert-Manager bootstrap resources via Kustomize'
    cmds:
      - kustomize build IT/cert-manager/ | kubectl apply -f -

  # ESO
  # ------------------------------------------------------------------------------
  external-secrets:deploy:
    desc: 'Install External Secrets Operator'
    cmds:
      - |
        helm upgrade --install external-secrets external-secrets/external-secrets \
          --version {{.EXTERNAL_SECRETS_VERSION}} \
          --namespace external-secrets-system \
          --values IT/external-secrets/eso-values.yaml \
          --hide-notes
      - kubectl wait --for=condition=available --timeout=300s deployment/external-secrets -n external-secrets-system

  # Vault
  # ------------------------------------------------------------------------------
  vault:clean:
    desc: 'Clean Vault deployment'
    silent: true
    cmds:
      - cmd: helm uninstall vault -n vault-system
        ignore_error: true
      - kubectl delete pvc data-vault-0 -n vault-system --ignore-not-found=true
      - echo "✅ Vault cleaned"

  vault:deploy:
    desc: 'Deploy HashiCorp Vault'
    cmds:
      - |
        helm upgrade --install vault hashicorp/vault \
          --version {{.VAULT_VERSION}} \
          --namespace vault-system \
          --values IT/vault/vault-values.yaml \
          --hide-notes
      - task: vault:init
      - task: vault:generate-secrets

  vault:init:
    desc: 'Initialize Vault and configure for ESO'
    cmds:
      - ./scripts/vault-init.sh

  vault:generate-secrets:
    desc: 'Generate initial secrets for all services using Vault'
    cmds:
      - ./scripts/vault-generate.sh secret/argocd/admin 32 base64 bcrypt admin.password
      - ./scripts/vault-generate.sh secret/sonarqube/monitoring 16 hex none passcode

  it:eso:apply-resources:
    desc: 'Apply ESO SecretStores and ExternalSecrets'
    cmds:
      - kustomize build IT/external-secrets/ | kubectl apply -f -
      - kubectl wait --for=condition=Ready externalsecret/argocd-admin-password -n argocd --timeout=300s

  # ArgoCD
  # ------------------------------------------------------------------------------
  argocd:deploy:
    desc: 'Deploy ArgoCD GitOps Engine'
    cmds:
      - |
        helm upgrade --install argocd argo/argo-cd \
          --version {{.ARGOCD_VERSION}} \
          --namespace argocd \
          --values IT/argocd/argocd-values.yaml \
          --hide-notes
      - kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout={{.KUBECTL_TIMEOUT}}
      - task: it:eso:apply-resources
      - kubectl apply -f IT/argocd/appproject-observability.yaml
      - kubectl apply -f IT/argocd/appproject-cicd.yaml
      - kubectl apply -f IT/argocd/appproject-security.yaml

  # Docker Image
  # ------------------------------------------------------------------------------
  image:build:
    desc: 'Build the Dev Container image (full variant)'
    env:
      IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
      IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
    cmds:
      - docker bake dev --progress=tty

  image:build:minimal:
    desc: 'Build minimal image for CI/Jobs'
    env:
      IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
      IMAGE_TAG: '{{.DOCKER_IMAGE_TAG_MINIMAL}}'
    cmds:
      - docker bake minimal --progress=tty

  image:release:
    desc: 'Build and push full image to Registry'
    env:
      IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
      IMAGE_TAG: '{{.DOCKER_IMAGE_TAG}}'
    cmds:
      - docker bake release --progress=tty

  image:release:minimal:
    desc: 'Build and push minimal image to Registry'
    env:
      IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
      IMAGE_TAG: '{{.DOCKER_IMAGE_TAG_MINIMAL}}'
    cmds:
      - docker bake release-minimal --progress=tty

  image:release:all:
    desc: 'Build and push both full and minimal images'
    cmds:
      - task: image:release:minimal
      - task: image:release

  ################################################################################
  # LINTING, VALIDATION & SECURITY TASKS
  ################################################################################

  check:
    desc: 'Run all checks (lint, validation, security)'
    cmds:
      - task: lint
      - task: validate
      - task: security

  # LINTING
  # ------------------------------------------------------------------------------
  lint:
    desc: 'Run all linters'
    cmds:
      - task: lint:yaml
      - task: lint:shell
      - task: lint:dockerfile
      - task: lint:markdown
      # Uncomment to start using Conventional Commits -> https://www.conventionalcommits.org
      #- task: lint:commit

  lint:yaml:
    desc: 'Lint all YAML files'
    cmds:
      - yamllint .

  lint:shell:
    desc: 'Lint all shell scripts'
    cmds:
      - find . -name '*.sh' -type f | grep -v '/.devbox/' | xargs -r shellcheck

  lint:dockerfile:
    desc: 'Lint all Dockerfiles'
    cmds:
      - find . -name Dockerfile -exec hadolint {} +

  lint:markdown:
    desc: 'Lint all Markdown files'
    cmds:
      - markdownlint-cli2 .

  lint:commit:
    desc: 'Lint the last commit message'
    cmds:
      - commitlint-rs from HEAD~1

  # VALIDATION
  # ------------------------------------------------------------------------------
  validate:
    desc: 'Run all validation tasks'
    cmds:
      - task: validate:kustomize
      - task: validate:kubeval

  validate:kustomize:
    desc: 'Validate all Kustomize overlays by building them'
    cmds:
      - defer: find . -type d -name charts -exec rm -rf {} +
      - for dir in $(find . -type f -name kustomization.yaml -printf '%h\n'); do
        kustomize build $dir --enable-helm; done

  validate:kubeval:
    desc: 'Validate Kubernetes manifests against their schemas'
    cmds:
      - defer: find . -type d -name charts -exec rm -rf {} +
      - for dir in $(find . -type f -name kustomization.yaml -printf '%h\n'); do kustomize build $dir --enable-helm | kubeval --ignore-missing-schemas -; done

  # SECURITY
  # ------------------------------------------------------------------------------
  security:
    desc: 'Run all security scanners'
    cmds:
      - task: security:iac
      - task: security:secrets

  security:iac:
    desc: 'Scan Infrastructure as Code for misconfigurations'
    cmds:
      - checkov --directory . --quiet

  security:secrets:
    desc: 'Scan for hardcoded secrets'
    cmds:
      - trufflehog filesystem . --exclude-paths .trufflehog-ignore --log-level=-1

  # DOCS
  # ------------------------------------------------------------------------------
  docs:
    desc: 'Generate all automatic documentation'
    cmds:
      - task: docs:helm

  docs:helm:
    desc: 'Generate documentation for Helm charts'
    cmds:
      - |
        for dir in $(find . -type f -name kustomization.yaml -printf '%h\n'); do
          if [ -f "$dir/values.yaml" ]; then
            CHART_NAME=$(basename $dir)
            echo "apiVersion: v2\nname: $CHART_NAME\nversion: 0.1.0" > $dir/Chart.yaml
            (cd $dir && helm-docs --template-files ../.helm-docs-template.gotmpl)
            rm $dir/Chart.yaml
          fi
        done

  # CA CERTIFICATE
  # ------------------------------------------------------------------------------
  ca:export:
    desc: 'Export CA certificate for browser import (optional)'
    cmds:
      - |
        kubectl get secret idp-demo-ca-secret -n cert-manager \
          -o jsonpath='{.data.tls\.crt}' | base64 -d > $HOME/idp-demo-ca.crt
        echo "✅ CA exported to: $HOME/idp-demo-ca.crt"
        echo "   Import in browser to remove security warnings"

  # REGISTRY MANAGEMENT
  # ------------------------------------------------------------------------------
  registry:clean:
    desc: 'Remove registry cache data'
    cmds:
      - rm -rf {{.REGISTRY_CACHE_PATH}}
      - echo "✅ Registry cache cleaned"

  registry:info:
    desc: 'Show registry status and cache size'
    cmds:
      - |
        if docker ps --filter "name=k3d-registry.localhost" --format "{{.Names}}" | grep -q registry;
        then
          echo "✅ Registry container running"
          if [ -d "{{.REGISTRY_CACHE_PATH}}" ]; then
            echo "📦 Cache size: $(du -sh {{.REGISTRY_CACHE_PATH}} 2>/dev/null | cut -f1)"
          else
            echo "📦 Cache size: empty"
          fi
          echo "📂 Location: {{.REGISTRY_CACHE_PATH}}"
          echo "🔗 Endpoint: localhost:5000"
        else
          echo "⚠️  Registry not running (using config: {{.K3D_CONFIG}})"
        fi

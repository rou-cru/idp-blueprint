version: '3'

vars:
  DOCKER_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME | default "idp-blueprint"}}'
  DOCKER_IMAGE_TAG: '{{.DOCKER_IMAGE_TAG | default "latest"}}'

  # Helm Chart Versions
  CILIUM_VERSION: '{{.CILIUM_VERSION | default "1.18.2"}}'
  CERT_MANAGER_VERSION: '{{.CERT_MANAGER_VERSION | default "v1.18.2"}}'
  EXTERNAL_SECRETS_VERSION: '{{.EXTERNAL_SECRETS_VERSION | default "0.20.2"}}'
  VAULT_VERSION: '{{.VAULT_VERSION | default "0.31.0"}}'
  ARGOCD_VERSION: '{{.ARGOCD_VERSION | default "8.5.8"}}'

tasks:
  deploy:
    desc: 'Deploy the entire IDP platform'
    cmds:
      # 1. Bootstrap Cluster & Core Services
      - task: k3d:create
      - task: it:apply-namespaces
      - task: it:apply-resources
      - task: cilium:deploy
      - task: cert-manager:deploy
      - task: vault:deploy
      - task: external-secrets:deploy
      # 2. Deploy GitOps Engine
      - task: argocd:deploy
      # 3. Deploy Policy Engine (Bootstrap App)
      - task: policies:deploy
      # 4. Deploy Application Stacks via ArgoCD
      - task: stacks:deploy

  destroy:
    desc: 'Remove all IDP related components and cluster'
    cmds:
      - k3d cluster delete idp-demo

  stacks:deploy:
    desc: 'Deploy all application stacks via ArgoCD ApplicationSets'
    cmds:
      - task: observability:deploy
      - task: cicd:deploy
      - task: security:deploy

  policies:deploy:
    desc: 'Deploy the Kyverno Policy Engine and policies via ArgoCD'
    cmds:
      - kubectl apply -f Policies/app-kyverno.yaml

  observability:deploy:
    desc: 'Deploy the Observability Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/observability/applicationset-observability.yaml

  cicd:deploy:
    desc: 'Deploy the CICD Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/cicd/applicationset-cicd.yaml

  security:deploy:
    desc: 'Deploy the Security Stack via ArgoCD'
    cmds:
      - kubectl apply -f K8s/security/applicationset-security.yaml

  it:apply-namespaces:
    desc: 'Apply all IT bootstrap namespaces via Kustomize'
    cmds:
      - kustomize build IT/namespaces/ | kubectl apply -f -

  it:apply-resources:
    desc: 'Apply all IT bootstrap resources via Kustomize'
    cmds:
      - kustomize build IT/ | kubectl apply -f -

  k3d:create:
    desc: 'Create a k3d cluster with 3 nodes'
    cmds:
      - k3d cluster create idp-demo -c IT/k3d-cluster.yaml

  cilium:deploy:
    desc: 'Install Cilium as CNI'
    cmds:
      - helm upgrade --install cilium cilium/cilium --version {{.CILIUM_VERSION}}
        --namespace kube-system --values IT/cilium-values.yaml

  cert-manager:deploy:
    desc: 'Deploy Cert-Manager to handle CA'
    cmds:
      - helm upgrade --install cert-manager jetstack/cert-manager --version {{.CERT_MANAGER_VERSION}}
        --namespace cert-manager --values IT/cert-manager-values.yaml

  external-secrets:deploy:
    desc: 'Install External Secrets Operator'
    cmds:
      - helm upgrade --install external-secrets external-secrets/external-secrets
        --version {{.EXTERNAL_SECRETS_VERSION}} --namespace external-secrets-system
        --values IT/eso-values.yaml
      - kubectl wait --for=condition=Ready pods -l
        app.kubernetes.io/name=external-secrets -n external-secrets-system
        --timeout=120s
      # Wait for webhook endpoints to be available
      - kubectl wait --for=jsonpath='{.subsets[*].addresses[*].ip}'
        endpoints/external-secrets-webhook -n external-secrets-system --timeout=60s

  vault:deploy:
    desc: 'Deploy HashiCorp Vault as Secret Backend'
    cmds:
      - helm upgrade --install vault hashicorp/vault --version {{.VAULT_VERSION}}
        --namespace vault-system --values IT/vault-values.yaml
      - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=vault -n
        vault-system --timeout=120s
      - task: vault:setup

  argocd:deploy:
    desc: 'Deploy ArgoCD GitOps Engine'
    cmds:
      - helm upgrade --install argocd argo/argo-cd --version {{.ARGOCD_VERSION}}
        --namespace argocd --values IT/argocd-values.yaml

  vault:setup:
    desc: 'Configure Vault for use by External Secrets'
    cmds:
      # Enable KV v2
      - kubectl exec -n vault-system vault-0 -- vault secrets enable -path=secret kv-v2
        || echo "KV already enabled"
      # Enable K8s auth
      - kubectl exec -n vault-system vault-0 -- vault auth enable kubernetes || echo
        "K8s auth already enabled"
      # Setup K8s auth
      - |
        kubectl exec -n vault-system vault-0 -- vault write auth/kubernetes/config \
          kubernetes_host="https://kubernetes.default.svc:443"
      # Create policy for External Secrets to read from KV store
      - |
        kubectl exec -n vault-system vault-0 -- /bin/sh -c 'vault policy write external-secrets-policy - <<EOF
          path "secret/data/*" {
            capabilities = ["read"]
          }
        EOF'
      # Create K8s auth role for External Secrets
      - |
        kubectl exec -n vault-system vault-0 -- vault write auth/kubernetes/role/external-secrets-role \
          bound_service_account_names=cluster-secrets \
          bound_service_account_namespaces=external-secrets-system \
          policies=external-secrets-policy \
          ttl=24h

  vault:ui:
    desc: 'Open Vault UI'
    cmds:
      - echo "🌐 Vault UI --> http://localhost:8200"
      - echo "🔑 Token --> root"
      - kubectl port-forward -n vault-system svc/vault 8200:8200

  image:build:
    desc: 'Build the Dev Container image with a custom name'
    env:
      BAKE_VAR_IMAGE_NAME: '{{.DOCKER_IMAGE_NAME}}'
      BAKE_VAR_IMAGE_TAG: '{{.DOCKER_IMAGE_NAME}}'
    cmds:
      - docker bake dev

  ################################################################################
  # LINTING, VALIDATION & SECURITY TASKS
  ################################################################################

  check:
    desc: 'Run all checks (lint, validation, security)'
    cmds:
      - task: lint
      - task: validate
      - task: security

  # LINTING
  # ------------------------------------------------------------------------------
  lint:
    desc: 'Run all linters'
    cmds:
      - task: lint:yaml
      - task: lint:shell
      - task: lint:dockerfile
      - task: lint:markdown
      # Uncomment to start using Conventional Commits -> https://www.conventionalcommits.org
      #- task: lint:commit

  lint:yaml:
    desc: 'Lint all YAML files'
    cmds:
      - yamllint .

  lint:shell:
    desc: 'Lint all shell scripts'
    cmds:
      - find . -path ./.devbox -prune -o -name '*.sh' -exec shellcheck {} +

  lint:dockerfile:
    desc: 'Lint all Dockerfiles'
    cmds:
      - find . -name Dockerfile -exec hadolint {} +

  lint:markdown:
    desc: 'Lint all Markdown files'
    cmds:
      - markdownlint-cli2 .

  lint:commit:
    desc: 'Lint the last commit message'
    cmds:
      - commitlint-rs from HEAD~1

  # VALIDATION
  # ------------------------------------------------------------------------------
  validate:
    desc: 'Run all validation tasks'
    cmds:
      - task: validate:kustomize
      - task: validate:kubeval

  validate:kustomize:
    desc: 'Validate all Kustomize overlays by building them'
    cmds:
      - defer: find . -type d -name charts -exec rm -rf {} +
      - for dir in $(find . -type f -name kustomization.yaml -printf '%h\n'); do
        kustomize build $dir --enable-helm; done

  validate:kubeval:
    desc: 'Validate Kubernetes manifests against their schemas'
    cmds:
      - defer: find . -type d -name charts -exec rm -rf {} +
      - for dir in $(find . -type f -name kustomization.yaml -printf '%h\n'); do kustomize build $dir --enable-helm | kubeval --ignore-missing-schemas -; done

  # SECURITY
  # ------------------------------------------------------------------------------
  security:
    desc: 'Run all security scanners'
    cmds:
      - task: security:iac
      - task: security:secrets

  security:iac:
    desc: 'Scan Infrastructure as Code for misconfigurations'
    cmds:
      - checkov --directory . --quiet

  security:secrets:
    desc: 'Scan for hardcoded secrets'
    cmds:
      - trufflehog filesystem . --exclude-paths .trufflehog-ignore --log-level=-1

  # DOCS
  # ------------------------------------------------------------------------------
  docs:
    desc: 'Generate all automatic documentation'
    cmds:
      - task: docs:helm

  docs:helm:
    desc: 'Generate documentation for Helm charts'
    cmds:
      - helm-docs

# -- Target Kubernetes workload resources for vulnerability and config-audit scans.
# Comma-separated list. If blank, all workloads are scanned.
targetWorkloads: "pod,replicaset,replicationcontroller,statefulset,daemonset,cronjob,job"

# -- Namespaces to be excluded from scanning.
excludeNamespaces: "kube-system,argocd,cert-manager,vault-system,kyverno-system"

# -- Prometheus ServiceMonitor configuration.
serviceMonitor:
  # -- Enables the deployment of a ServiceMonitor.
  enabled: true
  # -- Chooses the metricâ€™s labels on collisions with target labels.
  honorLabels: true

operator:
  # -- Enable vulnerability scanner.
  vulnerabilityScannerEnabled: true
  # -- Enable configuration audit scanner.
  configAuditScannerEnabled: true
  # -- Enable RBAC assessment scanner.
  rbacAssessmentScannerEnabled: true
  # -- Enable exposed secret scanner.
  exposedSecretScannerEnabled: true
  # -- Disable infrastructure assessment scanner. This is because the underlying
  # infrastructure in a k3d environment is not user-configurable.
  infraAssessmentScannerEnabled: false
  # -- Enable cluster compliance scanner.
  clusterComplianceEnabled: true

compliance:
  # -- Enable and configure compliance reporting.
  enabled: true
  # -- Define which compliance specifications to run.
  # We use 'k8s-pss-baseline' as it's a practical starting point for workload
  # security. Stricter specs like CIS or NSA would produce unactionable noise
  # in a local k3d environment where infrastructure is not user-configurable.
  specs:
    - "k8s-pss-baseline-0.1"

# -- Resource limits and requests for Trivy Operator controller.
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi

# -- Trivy scanner configuration.
trivy:
  # -- Mode: ClientServer uses a central Trivy server to avoid downloading DB on every scan.
  mode: ClientServer
  # -- Trivy Server URL (deployed below).
  serverURL: "http://trivy-server.security.svc:4954"

# -- Deploy a central Trivy Server with persistent vulnerability DB cache.
# This eliminates repeated DB downloads (~500MB) on every scan.
trivyServer:
  # -- Enable Trivy Server deployment.
  enabled: true

  # -- Persistent storage for vulnerability database.
  # DB is downloaded once every 12 hours instead of on every scan.
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 1Gi

  # -- Update vulnerability DB every 12 hours.
  # Balances freshness with network/resource usage.
  dbUpdateInterval: 12h

  # -- Resource limits for Trivy Server.
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

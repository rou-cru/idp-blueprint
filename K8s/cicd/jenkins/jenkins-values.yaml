## @section Controller Configuration
## @description Defines settings for the Jenkins controller pod.
controller:
  ## @subsection Resource Optimization
  ## @description Set low resource requests and limits for the main components to optimize for a demo environment.
  resources:
    # -- The minimum resources required for the Jenkins controller.
    requests:
      # -- The amount of CPU to request.
      cpu: 250m
      # -- The amount of memory to request.
      memory: 512Mi
    # -- The maximum resources the Jenkins controller can consume.
    limits:
      # -- The maximum amount of CPU to allow.
      cpu: 1000m
      # -- The maximum amount of memory to allow (Jenkins is memory-intensive).
      memory: 2Gi

  ## @subsection Admin Credentials
  ## @description Admin password from Vault via External Secrets Operator.
  # -- Use existing secret for admin credentials from Vault.
  admin:
    createSecret: false
    existingSecret: "jenkins-admin-credentials"
    userKey: jenkins-admin-user
    passwordKey: jenkins-admin-password
    # -- Admin username (replaces deprecated adminUser).
    username: "admin"

  ## @subsection Executor Configuration
  ## @description Best practice: no builds on controller, all on dynamic agents.
  # -- Number of executors on controller (0 = all builds run on agents).
  numExecutors: 0
  # -- Executor mode.
  executorMode: "NORMAL"

  ## @subsection Plugin Installation
  ## @description Core plugins for GitOps, observability, and code quality.
  ## Using :latest tag to auto-resolve all dependency conflicts.
  installPlugins:
    # Core workflow and Kubernetes
    - kubernetes:latest
    - workflow-aggregator:latest
    - git:latest
    - configuration-as-code:latest
    # Observability
    - prometheus:latest
    # UI/UX improvements
    - pipeline-graph-view:latest
    - dark-theme:latest
    # Code quality integration
    - sonar:latest
    # Kubernetes credentials provider for secure secret management
    - kubernetes-credentials-provider:latest

  # -- Install latest versions of dependencies to resolve conflicts automatically.
  installLatestPlugins: true
  # -- Install latest versions of explicitly specified plugins.
  installLatestSpecifiedPlugins: true
  # -- Overwrite plugins on upgrade.
  overwritePlugins: true
  # -- Overwrite bundled plugins with installPlugins versions.
  overwritePluginsFromImage: true

  ## @subsection Jenkins Configuration as Code (JCasC)
  ## @description Declarative Jenkins configuration.
  JCasC:
    # -- Enable default JCasC configuration.
    defaultConfig: true
    configScripts:
      # -- Prometheus metrics configuration.
      prometheus-config: |
        unclassified:
          prometheusConfiguration:
            path: "prometheus"
            defaultNamespace: "jenkins"
            useAuthenticatedEndpoint: false
            collectingMetricsPeriodInSeconds: 120
            countSuccessfulBuilds: true
            countFailedBuilds: true
            countUnstableBuilds: true
            countAbortedBuilds: true
            countNotBuiltBuilds: true
            fetchTestResults: true
            appendParamLabel: false
            appendStatusLabel: true
            collectDiskUsage: false
            collectNodeStatus: true
            processingDisabledBuilds: false
            perBuildMetrics: false
            jobAttributeName: "jenkins_job"
      # -- Dark theme as default.
      appearance-config: |
        appearance:
          themeManager:
            disableUserThemes: false
            theme: "dark"
      # -- SonarQube server integration.
      sonarqube-config: |
        unclassified:
          sonarglobalconfiguration:
            buildWrapperEnabled: true
            installations:
              - name: "SonarQube"
                serverUrl: "http://sonarqube-sonarqube.cicd.svc.cluster.local:9000"
                credentialsId: "sonarqube-token"
      # -- Kubernetes cloud configuration for dynamic agents.
      kubernetes-cloud: |
        jenkins:
          clouds:
          - kubernetes:
              name: "kubernetes"
              serverUrl: "https://kubernetes.default"
              namespace: "cicd"
              jenkinsUrl: "http://jenkins.cicd.svc.cluster.local:8080"
              jenkinsTunnel: "jenkins-agent.cicd.svc.cluster.local:50000"
              containerCapStr: "1"
              maxRequestsPerHostStr: "32"
              retentionTimeout: 0
              connectTimeout: 5
              readTimeout: 15
              podLabels:
              - key: "app.kubernetes.io/name"
                value: "jenkins-agent"
              - key: "app.kubernetes.io/component"
                value: "build-agent"
              - key: "app.kubernetes.io/part-of"
                value: "idp"
              templates: []
    # -- Security realm (uses admin from existingSecret).
    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"
    # -- Authorization strategy.
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false

  ## @subsection Sidecar Configuration
  ## @description Auto-reload JCasC configuration on changes.
  sidecars:
    configAutoReload:
      enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 100m
          memory: 128Mi

  ## @subsection Service Configuration
  ## @description ClusterIP service for Gateway API integration.
  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080

  ## @subsection Health Probes
  ## @description Kubernetes startup, liveness, and readiness probes.
  healthProbes: true
  probes:
    startupProbe:
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 12
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5

## @section Agent Configuration
## @description Kubernetes-based dynamic build agents.
agent:
  # -- Enable Kubernetes agents.
  enabled: true
  # -- Default namespace for agents.
  namespace: cicd
  # -- Agent resources (builds are resource-intensive).
  resources:
    requests:
      cpu: 512m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 1Gi
  # -- Pod retention policy.
  podRetention: "Never"
  # -- Container cap (max simultaneous agents).
  containerCap: 1
  # -- Idle minutes before termination.
  idleMinutes: 1

## @section Persistence
## @description Persistence for demo environment.
  persistence:
    enabled: true
    size: 8Gi
    storageClassName: standard

## @section RBAC
## @description Role-Based Access Control for Kubernetes integration.
rbac:
  # -- Create RBAC resources.
  create: true
  # -- Allow Jenkins to read Kubernetes secrets (for kubernetes-credentials-provider).
  readSecrets: true

## @section Service Account
## @description Service account for Jenkins controller.
serviceAccount:
  # -- Create service account.
  create: true
  # -- Service account name (auto-generated if empty).
  name: ""

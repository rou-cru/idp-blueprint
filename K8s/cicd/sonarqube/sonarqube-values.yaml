## @section SonarQube Server
## @description Resource definitions for the main SonarQube application.

## @section Community Build
## @description Enable SonarQube Community Build
community:
  enabled: true

sonarqube:
  priorityClassName: platform-cicd
  # -- Resource requests and limits for the SonarQube server.
  resources:
    requests:
      cpu: 250m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 1.5Gi
  # -- Liveness probe to check if the SonarQube server is running.
  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - 'wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" "http://localhost:9000/api/system/liveness"'
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 6
    timeoutSeconds: 1
  # -- Readiness probe to check if the SonarQube server is ready to accept traffic.
  readinessProbe:
    exec:
      command:
        - sh
        - -c
        - 'if curl -s -f http://localhost:9000/api/system/status | grep -q -e ''"status":"UP"'' -e ''"status":"DB_MIGRATION_NEEDED"'' -e ''"status":"DB_MIGRATION_RUNNING"''; then exit 0 fi exit 1'
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 6
    timeoutSeconds: 1

# -- Required initContainer to set kernel parameters for Elasticsearch.
initSysctl:
  enabled: true

# -- Required initContainer to set filesystem permissions.
initFs:
  enabled: true

## @section Persistence
## @description Configure persistence for SonarQube data, extensions, and logs.
persistence:
  enabled: true
  # -- Minimal size for a demo environment.
  size: 2Gi

## @section PostgreSQL Database
## @description Resource definitions for the bundled PostgreSQL database.
# -- Configuration for the bundled PostgreSQL database.
postgresql:
  priorityClassName: platform-cicd
  # -- Resource requests and limits for the PostgreSQL pod.
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 250m
      memory: 256Mi

## @section Secrets
## @description Admin credentials and monitoring passcode from Vault via ESO.
# -- Admin password from Vault ExternalSecret.
setAdminPassword:
  enabled: true
  passwordSecretName: sonarqube-admin-credentials
  passwordSecretKey: password
  currentPasswordSecretName: sonarqube-admin-credentials
  currentPasswordSecretKey: currentPassword

# -- Monitoring passcode from Vault ExternalSecret.
monitoringPasscodeSecretName: "sonarqube-monitoring-passcode"
monitoringPasscodeSecretKey: "passcode"
